@model StayFit.Models.Location

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



<h2>Create</h2>


@using (Html.BeginForm("Create", "Locations", FormMethod.Post, new { onsubmit = "return start()" }))
{
    @Html.AntiForgeryToken()
    

<div class="form-horizontal">


    <h4>Location</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        <label class="control-label col-md-2">Street Address: </label>
        <div class="col-md-10">
            <input type="text" id="st-address" placeholder="Enter the street address" class="form-control text-box single-line" />
            <span id="addresserror" class="text-danger check-field"></span>
        </div>
    </div>

    <div class="form-group">
        <label class="control-label col-md-2">Suburb: </label>
        <div class="col-md-10">
            <input type="text" id="suburb" placeholder="Enter the suburb name" class="form-control text-box single-line" />
            <span id="suburberror" class="text-danger check-field"></span>
        </div>
    </div>

    <div class="form-group">
        <label class="control-label col-md-2">Postcode: </label>
        <div class="col-md-10">
            <input type="text" id="postcode" placeholder="Enter the postcode" class="form-control text-box single-line" />
            <span id="postcodeerror" class="text-danger check-field"></span>
        </div>
    </div>

    <div class="form-group">
        <label class="control-label col-md-2">State: </label>
        <div class="col-md-10">
            <select class="form-control" id="state">
                <option value="VIC" selected>VIC</option>
                <option value="NSW">NSW</option>
                <option value="QLD">QLD</option>
                <option value="SA">SA</option>
                <option value="TAS">TAS</option>
                <option value="WA">WA</option>
            </select>
        </div>
    </div>
    <br />
    <span id="wrongaddress" class="text-danger check-field"></span>
    <br />
    <div class="form-group">
        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Rating, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Rating, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Rating, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group" style="">
        @Html.LabelFor(model => model.Latitude, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Latitude, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Latitude, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group" style="">
        @Html.LabelFor(model => model.Longitude, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Longitude, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Longitude, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" onsubmit="return start()" value ="Create" class="btn btn-default" />
        </div>
    </div>
</div>
    }

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
        <script>
            

            function geocode(address, suburb, postcode, state) {
                var pc;
                loc = "";
                if (!isNaN(postcode)) { pc = postcode.toString(); }
                axios({
                    method: 'post',
                    url: 'https://mappify.io/api/rpc/address/geocode',
                    data: {
                        streetAddress: address,
                        suburb: suburb,
                        postCode: pc,
                        state: state
                    }
                })
                    .then(function (response) {
                       // console.log(response);
                        if (response.data.result != null) {
                            loc = response.data.result.location;
                            document.getElementById("Latitude").value = loc.lat;
                            document.getElementById("Longitude").value = loc.lon;
                            console.log(loc);
                        }
                    })
                    .catch(function (error) {
                        console.log(error);
                    })
            }

            function validate(address, suburb, postcode, state) {
                var rstate = true;
                ae = document.getElementById("addresserror");
                se = document.getElementById("suburberror");
                pe = document.getElementById("postcodeerror");
                wa = document.getElementById("wrongaddress");
                //check if the error message is already shown
                //remove if shown
                if (ae && ae.innerText != "") {
                    ae.innerText = "";
                }
                if (se && se.innerText != "") {
                    se.innerText = "";
                } if (pe && pe.innerText != "") {
                    pe.innerText = "";
                } if (wa && wa.innerText != "") {
                    wa.innerText = "";
                }
                //validate all fields
                if (address == "") {
                    ae.innerText = "Address is required";
                    rstate = false;
                }
                if (suburb == "") {
                    se.innerText = "Suburb is required";
                    rstate = false;
                }
                if (isNaN(postcode)) {
                    pe.innerText = "Postcode is required";
                    rstate = false;
                }
                if (rstate) {
                    geocode(address, suburb, postcode, state);
                   // console.log(loc);
                    //check location
                    if (loc == null) {
                        wa.innerText = "The address entered is wrong. Please check and try again";
                        rstate = false;
                    }
                }
                return state;
            }

            function start() {
                var address = document.getElementById("st-address").value;
                var suburb = document.getElementById("suburb").value;
                var postcode = parseInt(document.getElementById("postcode").value);
                var state = document.getElementById("state").value;
                console.log(address, suburb, postcode, state);
                return validate(address, suburb, postcode, state);
            }

            

            
        </script>
    }
